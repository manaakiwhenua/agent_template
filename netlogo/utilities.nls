to-report trim-whitespace-and-quotes [string]
  ;; remove all spaces and ' and " from beginning and end of a string
  foreach [" " "\"" "'"] [ char ->
    while [(first string) = char] [set string (remove-item 0 string)]
    while [(last string) = char] [set string (remove-item ((length string) - 1) string)]
  ]
  report string
end

to do-nothing
  ;; a command that does nothing
end

to raise-error [message]
  ;; a command that stops the program and prints a message
  print "error"
  print message
  stop
end

to update-display
  ;; anything that is needed to update the ui displays that is not
  ;; handled by the display widgets goes here
  ;;
  ;; set labels on map to something
  ask invalid-patches [set plabel ""]
  (ifelse
    (map-label = "land use") [ ask valid-patches [set plabel LU] ]
    (map-label = "value") [ask valid-patches [set plabel value]]
    (map-label = "emissions") [ask valid-patches [set plabel emissions]]
    (map-label = "land use age") [ask valid-patches [set plabel landuse-age]]
    (map-label = "carbon stock") [ask valid-patches [set plabel carbon-stock]]
    (map-label = "bird suitable") [ask valid-patches [set plabel bird-suitable]]
    (map-label = "pollinated") [ask valid-patches [set plabel pollinated]]
    (map-label = "decision interval") [ask valid-patches [set plabel decision-interval]]
    (map-label = "cluster size") [ask valid-patches [set plabel cluster-size]]
  [ask valid-patches [set plabel ""]])
  ;; set color of patches to something, also set legend plot
  ask invalid-patches [set pcolor 0]
  (ifelse
    (map-color = "land use") [
      ask valid-patches [set pcolor LU-color]
      set-world-map-legend landuse-name landuse-color]
    (map-color = "carbon stock") [
      let this-color brown
      let min-value 0
      let max-value (max landuse-carbon-stock-maximum)
      ask valid-patches [set pcolor (brightness-map this-color max-value carbon-stock)]
      (set-world-map-legend-colormap this-color min-value max-value 10)]
    (map-color = "emissions") [
      let this-color orange
      let min-value 0
      let max-value (max landuse-emissions)
      ask valid-patches [set pcolor (brightness-map this-color max-value emissions)]
      (set-world-map-legend-colormap this-color min-value max-value 10)]
    (map-color = "bird suitable") [
      let this-color magenta
      let min-value 0
      let max-value 1
      ask valid-patches [set pcolor (brightness-map this-color max-value bird-suitable)]
      (set-world-map-legend-colormap this-color min-value max-value 2)]
    (map-color = "pollinated") [
      let this-color yellow
      let min-value 0
      let max-value 1
      ask valid-patches [set pcolor (brightness-map this-color max-value pollinated)]
      (set-world-map-legend-colormap this-color min-value max-value 3)]
    (map-color = "cluster size") [
      let this-color green
      let min-value 0
      let max-value ([cluster-size] of (max-one-of patches [cluster-size]))
      ask valid-patches [set pcolor (brightness-map this-color max-value cluster-size)]
      (set-world-map-legend-colormap this-color min-value max-value 10)]
    (map-color = "network") [
      ask valid-patches [set pcolor 0] ; default color for non-network patches
      ask landuse-networks [
        let this-color network-color
        ask my-landuse-network-links [
          ask other-end [set pcolor this-color]]]
      (set-world-map-legend 
        (range count landuse-networks)
        (map [this-network -> [network-color] of this-network] (sort landuse-networks)))]
    (map-color = "neighbour examples") [
      ;; Plot the neighbours of a few farmers blue, everything else
      ;; red. To visualise how big the neighbourhoods are.
      ask valid-patches [set pcolor red]
      with-local-randomness [
        ask n-of 5 farmers [
          ask neighbour-link-neighbors[set pcolor blue]]]
      set-world-map-legend (list) (list)]
  [ask valid-patches [set pcolor 0]])
end

to-report brightness-map [colour max-value this-value]
  ;; return a brightness variation of colour for values within
  ;; max-value, e.g., [brown 1.2 5].  This could be replaced with the
  ;; built-in function "scale-color". That might perform better, but
  ;; has slightly more complex inputs.
  report (colour + 4 - ((min (list max-value this-value)) / max-value * 5 ))
end

to set-world-map-legend [names colors]
  ;; create legend matchings namees to colors
  set-current-plot "legend"
  clear-plot
  foreach (range 0 (length names)) [ i ->
    create-temporary-plot-pen (word (item i names))
    set-plot-pen-color (item i colors)]
end

to set-world-map-legend-colormap [this-color min-value max-value number-of-colors]
  ;; create legend showing colormap defined by this-color, min-value,
  ;; max-value on intervals number-of-colors
  let this-step ((max-value - min-value)/(number-of-colors - 1))
  let values (map round (range min-value (max-value + this-step) this-step))
  (set-world-map-legend
     values
     (map [this-value -> (brightness-map this-color max-value this-value)] values))
end

to export-everything
  ;; Export lots of model data into export-directory
  ;;
  ;; First check if export-directory exists.  If does and it is a directory
  ;; the overwrite contents. If it is a regular file then inform user
  ;; and do nothing.  If does not exist creat as directory and write into it.
  (ifelse ((file-exists? export-directory) and (not pathdir:isDirectory? export-directory))
      [user-message (word "Cannot export: export-directory '" export-directory "' exists and is not a directory")]
      [pathdir:create export-directory
        export-view (word export-directory "/" "view.png")
        export-interface (word export-directory "/" "interface.png")
        export-output (word export-directory "/" "output.txt")
        export-all-plots (word export-directory "/" "all_plots.csv")
      export-world (word export-directory "/" "world.csv")])
end

to plot-land-use-fraction
  ;; plot land fraction as a percentage
  if (ticks > 0 ) [
    foreach landuse-code [this-LU ->
      ;; exclude missing data / invalid patches
      if (this-LU != 0 ) [
        let this-landuse-name (item this-LU landuse-name)
        set-current-plot-pen this-landuse-name
        plot ((item this-LU landuse-fraction) * 100)]]]
end

to add-weight-to-landuse-option [this-landuse-code weight]
  ;; add weight to a particular land use option, in the context of a farmer
  set landuse-option-weights (
          replace-item this-landuse-code landuse-option-weights
               ((item this-landuse-code landuse-option-weights) + weight))
end


to-report add-to-cluster [this-patch patches-not-yet-in-a-cluster]
  ;; recursive function used to compute the clustering of patches
  ;;
  ;; add input patch as first membe of cluster
  set patches-not-yet-in-a-cluster 
        (remove this-patch patches-not-yet-in-a-cluster)
  let this-cluster (list this-patch)
  ;; recursively search for neighbours with the same land use that
  ;; have not already been added to a cluster and add to this cluster
  foreach sort ([neighbors4] of this-patch)
      [ this-neighbour ->
          if (([LU] of this-neighbour) = ([LU] of this-patch) 
              and (member? this-neighbour patches-not-yet-in-a-cluster)) [
            let retval (add-to-cluster this-neighbour patches-not-yet-in-a-cluster)
            set patches-not-yet-in-a-cluster (item 0 retval)
            set this-cluster (sentence (item 1 retval) this-cluster)]]
  ;; return results
  report (list patches-not-yet-in-a-cluster this-cluster)
end
