;; Functions that run every iteration

to go
  ;; This function is called every iteration
  ;; 
  ;; setup now if never setup
  if (stop-after-year = 0) [setup]
  ;; begin "go" output
  if _first-go [
    set _first-go false
  ]
  apply-rules
  make-farmer-choices
  update-derived-model-quantities
  update-display
  ;; increase land use age
  ask valid-patches [set landuse-age (landuse-age + 1)]
  ;; step time and maybe stop model
  tick
  if ticks >= stop-after-year [
    set stop-after-year ( stop-after-year + years-to-run-before-stopping )
  stop ]
end

to apply-rules
  ;; find farmers who are making a decision this iteration
  set deciding-farmers (farmers with [(landuse-age mod decision-interval ) = 0])
  ;; initialise options to choose from
  ask deciding-farmers [ set landuse-option-weights (n-values (length landuse-code) [0]) ]
  ;; execute rules, adding to landuse-option-weights that are chosen from
  ;; below
  if (baseline-rule-weight > 0) [apply-baseline-rule]
  if (neighbour-rule-weight > 0) [apply-neighbour-rule]
  if (network-rule-weight > 0) [apply-network-rule]
  if Industry-level [apply-industry-level-rule]
  if Government-level [apply-government-level-rule]
  if (economy-rule-weight > 0) [apply-economy-rule]
  if (emissions-rule-weight > 0) [apply-emissions-rule]
end

to make-farmer-choices
  ;; make new land use choice based on landuse-option-weights
  ;;
  ask deciding-farmers [
    ;; if no weight on any new option then do nothing
    if sum landuse-option-weights > 0 [
      ;; weighted random choice
      let LU-new (choose landuse-code landuse-option-weights)
      ;; if different from the current landuse this is a change
      if LU-new != LU [
        set LU LU-new
        set landuse-age 0
        set-patch-landuse-data]]]
end

to update-derived-model-quantities
  ;; Calculate patch and global quantities that depende on land use
  ;; 
  ;; compute carbon stock of each patch
  ask valid-patches [set carbon-stock (min
    (list (landuse-age * carbon-stock-rate) carbon-stock-maximum))]
  ;;
  ;; compute total carbon stock
  set total-carbon-stock (sum [carbon-stock] of valid-patches)
  ;;
  ;; compute Shannon index of diversity, do not include missing value
  ;; land use
  let total-number-of-valid-patches (count valid-patches)
  set diversity-index 0
  foreach landuse-code [ this-LU ->
    let p ( (count valid-patches with [ LU = this-LU ]) / total-number-of-valid-patches )
    if ( p > 0) [
    set diversity-index (diversity-index + (-1 * p * (ln p)))]]
  ;;
  ;; compute contiguity index
  ;;
  ;; ref URL from Clemence https://www.fragstats.org/index.php/fragstats-metrics/patch-based-metrics/shape-metrics/p5-contiguity-index
  ;;
  ;; example code from Clemence.
  ;;
  ;; let contiguity-index 0
  ;; ask patches [
  ;;   let neighbors-with-same-value neighbors with [my-value = [my-value] of myself]
  ;;   (ifelse any? neighbors-with-same-value
  ;;   [let weighted-contiguity sum [1 / distance myself] of neighbors-with-same-value
  ;;    set contiguity-index contiguity-index + weighted-contiguity]
  ;;    ;; Handle case when there are no neighbors with the same value
  ;;   [set contiguity-index contiguity-index + 0]
  ;; )]
  ;;
  ;; My code. Why distance since finding direct neighbours? How to
  ;; normalise the index?
  set contiguity-index 0
  ask valid-patches [
    ask neighbors with [LU = [LU] of myself] [
        set contiguity-index (contiguity-index + (1 / distance myself))]]
  ;;
  ;; pollination index: Clemence's explanation: Simplest way consists
  ;; in analysing the presence of scrub cell within the neighbourhood
  ;; (500m = 4cells) of a crop patch (perennial or annual). Report 1
  ;; if yes and 0 if no. Add the number of cells=1 and divide by the
  ;; total number of crop cells (annual and perennial)
  ask valid-patches [set pollinated 0]
  ask valid-patches with [(LU = 3) or (LU = 4)] [
    if (count valid-patches with [((distance myself) <= 4) and (LU = 5)] >= 1) [
        set pollinated 1]]
  set pollinated-fraction (sum [pollinated] of valid-patches)
  if (pollinated-fraction > 0) [
    set pollinated-fraction (pollinated-fraction / count valid-patches with [(LU = 3) or (LU = 4)])]
  ;;
  ;; bird suitability index: Clemence's explanation Concerns the
  ;; perennial crops and forest (exotic+natural) cells. Value= the
  ;; number of cells where the habitat quality is ok for native birds
  ;; (like Kereru) / total number of cells. Simplest way consists in
  ;; analysing all concerns cells: is this cell surrounding by at
  ;; least 19 patches of LU 4, 8 or 9 ? Report 1 if yes and 0 if
  ;; no. Add the number of cells=1 and divide by the total number of
  ;; cells.
  ask valid-patches [set bird-suitable 0]
  ask valid-patches with [(LU = 4) or (LU = 8) or (LU = 9)] [
    if (count valid-patches with [((distance myself) <= 4) and ((LU = 4) or (LU = 8) or (LU = 9))] >= 19) [
          set bird-suitable 1]]
  ;;
  ;; compute fraction of bird suitable patches in the world
          set bird-suitable-fraction ((sum [bird-suitable] of valid-patches) / (world-size ^ 2))
  ;;
  ;; compute CO2 equivalent emissions
  set previous-emissions total-emissions
  set total-emissions sum [emissions] of valid-patches
  ;;
  ;; compute gross margin values per LU (ref Herzig et al) for each
  ;; patch
  ask valid-patches [
    if (    ((year-of-first-product = "none")  or landuse-age >= year-of-first-product)
        and ((year-of-last-product = "none")   or landuse-age <= year-of-last-product)) [
      set value (product-value * product-yield)]]
  ;;
  ;; compute total value of all products
  set previous-total-value total-value
  set total-value sum [value] of valid-patches
  ;; 
  ;; total livestock yield
  set total-livestock-yield (sum [product-yield] of valid-patches with [product-type = 2])
  ;; 
  ;; total crop yield
  set total-crop-yield (sum [product-yield] of valid-patches with [landuse-product-type = 1])
  ;;
  ;; compute fraction of land use for each category
  let valid-patch-total (count valid-patches)
  set landuse-fraction (
    map [this-LU -> (count valid-patches with [LU = this-LU]) / valid-patch-total] landuse-code)
end
