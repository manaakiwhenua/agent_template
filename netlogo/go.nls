;; Functions that run every iteration

to go
  ;; This function is called every iteration
  ;; 
  ;; setup now if never setup
  if (stop-after-year = 0) [setup]
  ;; begin "go" output
  if _first-go [
    set _first-go false
  ]
  setup-farmer-choices
  setup-hard-rule-changes
  apply-rules
  apply-farmer-choices
  apply-hard-rule-changes
  update-derived-model-quantities
  update-display
  ;; increase land use age
  ask valid-patches [set landuse-age (landuse-age + 1)]
  ;; step time and maybe stop model
  tick
  if ticks >= stop-after-year [
    set stop-after-year ( stop-after-year + years-to-run-before-stopping )
  stop ]
end

to apply-rules
  ;; execute rules, adding to landuse-option-weights that are chosen from
  ;; below
  ;; 
  if (baseline-rule-weight > 0)       [apply-baseline-rule]
  if (neighbour-rule-weight > 0)      [apply-neighbour-rule]
  if (network-rule-weight > 0)        [apply-network-rule]
  if (industry-rule-percentage > 0)   [apply-industry-level-rule]
  if (government-rule-percentage > 0) [apply-government-level-rule]
  if (economy-rule-weight > 0)        [apply-economy-rule]
  if (emissions-rule-weight > 0)      [apply-emissions-rule]
end

to setup-farmer-choices
  ;; Find farmers who are making a decision this iteration and setup
  ;; their initial choice weights.  Set a weight of 1 to their current
  ;; land use.
  ;; 
  set deciding-farmers (farmers with [
              (decision-interval != "none")
              and (landuse-age mod decision-interval ) = 0])
  ask deciding-farmers [
    set landuse-option-weights (n-values (length landuse-code) [0]) 
    add-weight-to-landuse-option LU 1]
end

to apply-farmer-choices
  ;; make new land use choice based on landuse-option-weights
  ;;
  ask deciding-farmers [
    ;; only act if at least one land use has some weight
    if (sum landuse-option-weights) > 0 [
      ;; find value of maximum weight
      let maximum-weight (max landuse-option-weights)
      ;; find land uses codes that have this maximum weight
      let landuses-with-maximum-weight (
          filter [i -> (item i landuse-option-weights) = maximum-weight] landuse-code)
      ;; select randomly from landuses-with-maximum-weight
      let landuse-choice (one-of landuses-with-maximum-weight)
      ;; if different from the current landuse this is a change
      if landuse-choice != LU [set-new-landuse landuse-choice]]]
end

to setup-hard-rule-changes
  ;; prepare list of hard rule changes for this iteration
  ;;
  set hard-rule-changes (list)
end

to apply-hard-rule-changes
  ;; make land use changes prepared by hard rules.  If this implies a
  ;; change to the current land use then do nothing
  ;;
  foreach hard-rule-changes [this-list -> 
    let this-farmer (item 0 this-list)
    let landuse-choice (item 1 this-list)
    if (landuse-choice != ([LU] of this-farmer)) [
      ask this-farmer [set-new-landuse landuse-choice]]]
end    

to update-derived-model-quantities
  ;; Calculate patch and global quantities that depende on land use
  ;; 
  ;; compute carbon stock of each patch
  ask valid-patches [set carbon-stock (min
    (list (landuse-age * carbon-stock-rate) carbon-stock-maximum))]
  ;;
  ;; compute total carbon stock
  set total-carbon-stock (sum [carbon-stock] of valid-patches)
  ;;
  ;; compute Shannon index of diversity, do not include missing value
  ;; land use
  let total-number-of-valid-patches (count valid-patches)
  set diversity-index 0
  foreach landuse-code [ this-LU ->
    let p ( (count valid-patches with [ LU = this-LU ]) / total-number-of-valid-patches )
    if ( p > 0) [
    set diversity-index (diversity-index + (-1 * p * (ln p)))]]
  ;;
  ;; land use contiguity related quantities
  ;;
  ;; Use a while loop and recursive function (add-to-cluster) to
  ;; traverse patches combining non-diagonal neighbours into clusters
  ;; without double counting. When a patch is added to a cluster it is
  ;; removed from patches-not-yet-in-a-cluster. The variable clusters
  ;; is a list of patch-lists. 
  let patches-not-yet-in-a-cluster (sort valid-patches)
  let clusters (list)
  while [(length patches-not-yet-in-a-cluster) > 0] [
  let retval (add-to-cluster 
                (first patches-not-yet-in-a-cluster)
                patches-not-yet-in-a-cluster)
    set patches-not-yet-in-a-cluster (item 0 retval)
    set clusters (fput (item 1 retval) clusters)]
  ;; set patch variables cluster-size
  foreach clusters [this-cluster ->
    let this-cluster-size (length this-cluster)
    foreach this-cluster [ this-patch -> ask this-patch [set cluster-size this-cluster-size]]]
  ;; Compute mean-patch-size as the mean cluster size
  set mean-patch-size ((sum
                        (map [this-cluster -> (length this-cluster)] clusters))
                        / (length clusters))
  ;; Compute fragmentation-index as mean cluster size normalised by
  ;; the number of patches (world size)
  set fragmentation-index (mean-patch-size / (count valid-patches))
  ;; 
  ;; pollination state of each patch
  ;; 
  ask valid-patches [set pollinated 0]
  ask valid-patches with [(LU = 3) or (LU = 4)] [
    let nearby-patches (valid-patches with [(distance myself) <= 4])
    set pollinated (ifelse-value
          ((count nearby-patches with [(LU = 5)]) > 1 ) [1]
          ((count nearby-patches with [(member? LU (list 7 8 9))]) > 1 ) [0.5]
          [0])]
  ;; the mean pollination state of all patches
  set pollination-index (mean [pollinated] of valid-patches)
  ;;
  ;; bird suitability index: Clemence's explanation Concerns the
  ;; perennial crops and forest (exotic+natural) cells. Value= the
  ;; number of cells where the habitat quality is ok for native birds
  ;; (like Kereru) / total number of cells. Simplest way consists in
  ;; analysing all concerns cells: is this cell surrounding by at
  ;; least 19 patches of LU 4, 8 or 9 ? Report 1 if yes and 0 if
  ;; no. Add the number of cells=1 and divide by the total number of
  ;; cells.
  ask valid-patches [set bird-suitable 0]
  ask valid-patches with [(LU = 4) or (LU = 8) or (LU = 9)] [
    if (count valid-patches with [((distance myself) <= 4) and ((LU = 4) or (LU = 8) or (LU = 9))] >= 19) [
          set bird-suitable 1]]
  ;;
  ;; compute mean of bird suitability
  set bird-suitable-index (mean [bird-suitable] of valid-patches)
  ;;
  ;; compute CO2 equivalent emissions
  set previous-emissions total-emissions
  set total-emissions sum [emissions] of valid-patches
  ;;
  ;; compute gross margin values per LU (ref Herzig et al) for each
  ;; patch
  ask valid-patches [
    if (    ((year-of-first-product = "none")  or landuse-age >= year-of-first-product)
        and ((year-of-last-product = "none")   or landuse-age <= year-of-last-product)) [
      set value (product-value * product-yield)]]
  ;;
  ;; compute total value of all products
  set previous-total-value total-value
  set total-value sum [value] of valid-patches
  ;; 
  ;; total livestock yield
  set total-livestock-yield (sum [product-yield] of valid-patches with [product-type = 2])
  ;; 
  ;; total crop yield
  set total-crop-yield (sum [product-yield] of valid-patches with [product-type = 1])
  ;;
  ;; compute fraction of land use for each category
  let valid-patch-total (count valid-patches)
  set landuse-fraction (
    map [this-LU -> (count valid-patches with [LU = this-LU]) / valid-patch-total] landuse-code)
end
